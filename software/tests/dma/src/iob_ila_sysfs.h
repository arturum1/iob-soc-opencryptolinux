/* This file was automatically generated by:
 * `write_linux_sysfs_header` method of `mkregs.py`
 */

#ifndef H_IOB_ILA_SYSFS_H
#define H_IOB_ILA_SYSFS_H

// Sysfs show/store functions
static ssize_t sysfs_enosys_show(struct device *dev, struct device_attribute *attr, char *buf) {
	return -ENOSYS;
}

static ssize_t sysfs_enosys_store(struct device *dev, struct device_attribute *attr, const char __user *buf, size_t count) {
	return -ENOSYS;
}

static ssize_t sysfs_miscellaneous_store(struct device *dev, struct device_attribute *attr, const char __user *buf, size_t count) {
	u32 value = 0;
	if (!mutex_trylock(&iob_ila_mutex)) {
		pr_info("Another process is accessing the device\n");
		return -EBUSY;
	}
	sscanf(buf, "%u", &value);
	iob_data_write_reg(iob_ila_data.regbase, value, IOB_ILA_MISCELLANEOUS_ADDR, IOB_ILA_MISCELLANEOUS_W);
	mutex_unlock(&iob_ila_mutex);
	pr_info("[iob_ila] Sysfs - Write: 0x%x\n", value);
	return count;
}

static ssize_t sysfs_trigger_type_store(struct device *dev, struct device_attribute *attr, const char __user *buf, size_t count) {
	u32 value = 0;
	if (!mutex_trylock(&iob_ila_mutex)) {
		pr_info("Another process is accessing the device\n");
		return -EBUSY;
	}
	sscanf(buf, "%u", &value);
	iob_data_write_reg(iob_ila_data.regbase, value, IOB_ILA_TRIGGER_TYPE_ADDR, IOB_ILA_TRIGGER_TYPE_W);
	mutex_unlock(&iob_ila_mutex);
	pr_info("[iob_ila] Sysfs - Write: 0x%x\n", value);
	return count;
}

static ssize_t sysfs_trigger_negate_store(struct device *dev, struct device_attribute *attr, const char __user *buf, size_t count) {
	u32 value = 0;
	if (!mutex_trylock(&iob_ila_mutex)) {
		pr_info("Another process is accessing the device\n");
		return -EBUSY;
	}
	sscanf(buf, "%u", &value);
	iob_data_write_reg(iob_ila_data.regbase, value, IOB_ILA_TRIGGER_NEGATE_ADDR, IOB_ILA_TRIGGER_NEGATE_W);
	mutex_unlock(&iob_ila_mutex);
	pr_info("[iob_ila] Sysfs - Write: 0x%x\n", value);
	return count;
}

static ssize_t sysfs_trigger_mask_store(struct device *dev, struct device_attribute *attr, const char __user *buf, size_t count) {
	u32 value = 0;
	if (!mutex_trylock(&iob_ila_mutex)) {
		pr_info("Another process is accessing the device\n");
		return -EBUSY;
	}
	sscanf(buf, "%u", &value);
	iob_data_write_reg(iob_ila_data.regbase, value, IOB_ILA_TRIGGER_MASK_ADDR, IOB_ILA_TRIGGER_MASK_W);
	mutex_unlock(&iob_ila_mutex);
	pr_info("[iob_ila] Sysfs - Write: 0x%x\n", value);
	return count;
}

static ssize_t sysfs_index_store(struct device *dev, struct device_attribute *attr, const char __user *buf, size_t count) {
	u32 value = 0;
	if (!mutex_trylock(&iob_ila_mutex)) {
		pr_info("Another process is accessing the device\n");
		return -EBUSY;
	}
	sscanf(buf, "%u", &value);
	iob_data_write_reg(iob_ila_data.regbase, value, IOB_ILA_INDEX_ADDR, IOB_ILA_INDEX_W);
	mutex_unlock(&iob_ila_mutex);
	pr_info("[iob_ila] Sysfs - Write: 0x%x\n", value);
	return count;
}

static ssize_t sysfs_signal_select_store(struct device *dev, struct device_attribute *attr, const char __user *buf, size_t count) {
	u32 value = 0;
	if (!mutex_trylock(&iob_ila_mutex)) {
		pr_info("Another process is accessing the device\n");
		return -EBUSY;
	}
	sscanf(buf, "%u", &value);
	iob_data_write_reg(iob_ila_data.regbase, value, IOB_ILA_SIGNAL_SELECT_ADDR, IOB_ILA_SIGNAL_SELECT_W);
	mutex_unlock(&iob_ila_mutex);
	pr_info("[iob_ila] Sysfs - Write: 0x%x\n", value);
	return count;
}

static ssize_t sysfs_sample_data_show(struct device *dev, struct device_attribute *attr, char *buf) {
	u32 value = iob_data_read_reg(iob_ila_data.regbase, IOB_ILA_SAMPLE_DATA_ADDR, IOB_ILA_SAMPLE_DATA_W);
	pr_info("[iob_ila] Sysfs - Read: 0x%x\n", value);
	return sprintf(buf, "%u", value);
}

static ssize_t sysfs_n_samples_show(struct device *dev, struct device_attribute *attr, char *buf) {
	u32 value = iob_data_read_reg(iob_ila_data.regbase, IOB_ILA_N_SAMPLES_ADDR, IOB_ILA_N_SAMPLES_W);
	pr_info("[iob_ila] Sysfs - Read: 0x%x\n", value);
	return sprintf(buf, "%u", value);
}

static ssize_t sysfs_current_data_show(struct device *dev, struct device_attribute *attr, char *buf) {
	u32 value = iob_data_read_reg(iob_ila_data.regbase, IOB_ILA_CURRENT_DATA_ADDR, IOB_ILA_CURRENT_DATA_W);
	pr_info("[iob_ila] Sysfs - Read: 0x%x\n", value);
	return sprintf(buf, "%u", value);
}

static ssize_t sysfs_current_triggers_show(struct device *dev, struct device_attribute *attr, char *buf) {
	u32 value = iob_data_read_reg(iob_ila_data.regbase, IOB_ILA_CURRENT_TRIGGERS_ADDR, IOB_ILA_CURRENT_TRIGGERS_W);
	pr_info("[iob_ila] Sysfs - Read: 0x%x\n", value);
	return sprintf(buf, "%u", value);
}

static ssize_t sysfs_current_active_triggers_show(struct device *dev, struct device_attribute *attr, char *buf) {
	u32 value = iob_data_read_reg(iob_ila_data.regbase, IOB_ILA_CURRENT_ACTIVE_TRIGGERS_ADDR, IOB_ILA_CURRENT_ACTIVE_TRIGGERS_W);
	pr_info("[iob_ila] Sysfs - Read: 0x%x\n", value);
	return sprintf(buf, "%u", value);
}

static ssize_t sysfs_version_show(struct device *dev, struct device_attribute *attr, char *buf) {
	u32 value = iob_data_read_reg(iob_ila_data.regbase, IOB_ILA_VERSION_ADDR, IOB_ILA_VERSION_W);
	pr_info("[iob_ila] Sysfs - Read: 0x%x\n", value);
	return sprintf(buf, "%u", value);
}

// Device attributes
DEVICE_ATTR(miscellaneous, 0600, sysfs_enosys_show, sysfs_miscellaneous_store);
DEVICE_ATTR(trigger_type, 0600, sysfs_enosys_show, sysfs_trigger_type_store);
DEVICE_ATTR(trigger_negate, 0600, sysfs_enosys_show, sysfs_trigger_negate_store);
DEVICE_ATTR(trigger_mask, 0600, sysfs_enosys_show, sysfs_trigger_mask_store);
DEVICE_ATTR(index, 0600, sysfs_enosys_show, sysfs_index_store);
DEVICE_ATTR(signal_select, 0600, sysfs_enosys_show, sysfs_signal_select_store);
DEVICE_ATTR(sample_data, 0600, sysfs_sample_data_show, sysfs_enosys_store);
DEVICE_ATTR(n_samples, 0600, sysfs_n_samples_show, sysfs_enosys_store);
DEVICE_ATTR(current_data, 0600, sysfs_current_data_show, sysfs_enosys_store);
DEVICE_ATTR(current_triggers, 0600, sysfs_current_triggers_show, sysfs_enosys_store);
DEVICE_ATTR(current_active_triggers, 0600, sysfs_current_active_triggers_show, sysfs_enosys_store);
DEVICE_ATTR(version, 0600, sysfs_version_show, sysfs_enosys_store);

// Probe / Remove functions
static int iob_ila_create_device_attr_files(struct device *device) {
	int ret = 0;
	ret |= device_create_file(device, &dev_attr_miscellaneous);
	ret |= device_create_file(device, &dev_attr_trigger_type);
	ret |= device_create_file(device, &dev_attr_trigger_negate);
	ret |= device_create_file(device, &dev_attr_trigger_mask);
	ret |= device_create_file(device, &dev_attr_index);
	ret |= device_create_file(device, &dev_attr_signal_select);
	ret |= device_create_file(device, &dev_attr_sample_data);
	ret |= device_create_file(device, &dev_attr_n_samples);
	ret |= device_create_file(device, &dev_attr_current_data);
	ret |= device_create_file(device, &dev_attr_current_triggers);
	ret |= device_create_file(device, &dev_attr_current_active_triggers);
	ret |= device_create_file(device, &dev_attr_version);
	return ret;
}

static void iob_ila_remove_device_attr_files(struct iob_data *iob_ila_data) {
	device_remove_file(iob_ila_data->device, &dev_attr_miscellaneous);
	device_remove_file(iob_ila_data->device, &dev_attr_trigger_type);
	device_remove_file(iob_ila_data->device, &dev_attr_trigger_negate);
	device_remove_file(iob_ila_data->device, &dev_attr_trigger_mask);
	device_remove_file(iob_ila_data->device, &dev_attr_index);
	device_remove_file(iob_ila_data->device, &dev_attr_signal_select);
	device_remove_file(iob_ila_data->device, &dev_attr_sample_data);
	device_remove_file(iob_ila_data->device, &dev_attr_n_samples);
	device_remove_file(iob_ila_data->device, &dev_attr_current_data);
	device_remove_file(iob_ila_data->device, &dev_attr_current_triggers);
	device_remove_file(iob_ila_data->device, &dev_attr_current_active_triggers);
	device_remove_file(iob_ila_data->device, &dev_attr_version);
	device_destroy(iob_ila_data->class, iob_ila_data->devnum);
	return;
}

#endif // H_IOB_ILA_SYSFS_H
